# Install packages
pacman::p_load("Biostrings", "DECIPHER", "ggtree", "randomcoloR", "stringr", "tidyverse")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/JGI_PUFA/")
# Read in the dataset
dat <- readAAAStringSet("data/50_TARA_psychro_thermo_unaligned.fasta")
# Install packages
pacman::p_load("Biostrings", "DECIPHER", "ggtree", "randomcoloR", "stringr", "tidyverse")
# Read in the dataset
dat <- readAAAStringSet("data/50_TARA_psychro_thermo_unaligned.fasta")
# Read in the dataset
dat <- readAAStringSet("data/50_TARA_psychro_thermo_unaligned.fasta")
# Pull out only the psychrophiles and thermophiles
fifty <- readAAStringSet("data/50_TARA_psychro_thermo_unaligned.fasta")
twenty <- fifty[!grep("_marine", names(fifty))]
twenty
names(fifty)
twenty <- fifty[!grep("_marine", names(fifty))]
twenty
# Pull out only the psychrophiles and thermophiles
fifty <- readAAStringSet("data/50_TARA_psychro_thermo_unaligned.fasta")
names(fifty)
twenty <- fifty[-grep("_marine", names(fifty))]
twenty
names(twenty)
# Install packages
pacman::p_load("tidyverse",
"Biostrings",
"janitor",
"viridis")
# In order to look for PUFA genes,
# You start by BLASTing the Pfa synthase gene
# A type I polyketide synthase called PfaA (below)
pfaA <- readAAStringSet("data/query_seqs/PfaA.fasta")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# In order to look for PUFA genes,
# You start by BLASTing the Pfa synthase gene
# A type I polyketide synthase called PfaA (below)
pfaA <- readAAStringSet("data/query_seqs/PfaA.fasta")
head(pfaA)
width(pfaA)
# Read in the BLAST results
blast <- read_csv("data/blast_output/20200615_TARA_psychrophiles_PUFA_blast.csv") %>%
janitor::clean_names() # one of my favorite functions of all times! Can you tell what it does?
# Read in your mapping dataset
full50 <- read_csv("data/full50_raw.csv")
full50$genome.x # this is the column we are interested in!
dat_wide <- full50 %>%
dplyr::filter(!is.na(OleA_patric)) %>%
dplyr::mutate(OleA_pos = stringr::word(OleA_patric, sep = "\\.", -1),
OleC_pos = stringr::word(OleC_patric, sep = "\\.", -1),
OleD_pos = stringr::word(OleD_patric, sep = "\\.", -1)) %>%
dplyr::select(genome.x, OleA_pos, OleC_pos, OleD_pos)
full50$genome.x %in% blast$genome
full50$genome.x[full50$genome.x %in% blast$genome]
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/data/")
writeXStringSet(twenty, "data/20_psychro_thermo_seqs_only_unaligned.fasta")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
writeXStringSet(twenty, "data/20_psychro_thermo_seqs_only_unaligned.fasta")
# First let's practice reading in a tree in Newick format
nj <- read.tree("data/trees/20_psychro_thermo_seqs_NJ_500boot.nwk")
ml <- read.tree("data/trees/20200617_20_psychro_thermo_ML_500boot.nwk")
# Install packages
install.packages("patchwork")
install.packages("patchwork")
# Install packages
pacman::p_load("ggtree", "patchwork", "tidyverse")
# First let's practice reading in a tree in Newick format
nj <- read.tree("data/trees/20_psychro_thermo_seqs_NJ_500boot.nwk")
ml <- read.tree("data/trees/20200617_20_psychro_thermo_ML_500boot.nwk")
# Convert the trees into a ggplot format using the amazing package ggtree
# It has it's own book! https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
gg1 <- ggtree(nj)
# Convert the trees into a ggplot format using the amazing package ggtree
# It has it's own book! https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
njt <- ggtree(nj)
mlt <- ggtree(ml)
njt + mlt
# Add tip labels
njt <- ggtree(nj) +
geom_tiplab()
njt
# Convert the trees into a ggplot format using the amazing package ggtree
# It has it's own book! https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
njt <- ggtree(nj)
mlt <- ggtree(ml)
# Using the patchwork package you can plot them side by side using a '+'
# https://www.datanovia.com/en/blog/ggplot-multiple-plots-made-ridiculuous-simple-using-patchwork-r-package/
njt + mlt
# Add tip labels and resize so it doesn't go off the page
njt <- ggtree(nj) +
geom_tiplab() +
xlim(NA, 10)
njt
# Add tip labels and resize so it doesn't go off the page
njt <- ggtree(nj) +
geom_tiplab() +
xlim(NA, 5)
njt
# Add tip labels
njt2 <- njt +
geom_tiplab()
njt2
# Add tip labels
njt2 <- njt +
geom_tiplab()
njt2
# Convert the trees into a ggplot format using the amazing package ggtree
# It has it's own book! https://guangchuangyu.github.io/ggtree-book/chapter-ggtree.html
njt <- ggtree(nj)
mlt <- ggtree(ml)
# Using the patchwork package you can plot them side by side using a '+'
# https://www.datanovia.com/en/blog/ggplot-multiple-plots-made-ridiculuous-simple-using-patchwork-r-package/
njt + mlt
# Add tip labels
njt2 <- njt +
geom_tiplab()
njt2
# Resize so it doesn't go off the page
njt3 <- njt2 +
geom_tiplab() +
xlim(NA, 5)
# Resize so it doesn't go off the page
njt3 <- njt2 +
xlim(NA, 5)
# Add tip labels
njt2 <- njt +
geom_tiplab()
njt2
# Resize so it doesn't go off the page
njt3 <- njt2 +
xlim(NA, 5)
njt3
# Resize tree so it doesn't go off the page
njt3 <- njt2 +
xlim(NA, 3)
njt3
# Resize tree so it doesn't go off the page
njt3 <- njt2 +
xlim(NA, 4)
njt3
# Resize tree so it doesn't go off the page
njt3 <- njt2 +
xlim(0, 4) # 4 is an arbitrary unit from the right side of the page
# try playing around with this number
njt3
# There is so much you can do! For example, let's display the bootstrap values
njt_boot <- njt3 +
geom_nodelab(label = label)
# There is so much you can do! For example, let's display the bootstrap values
njt_boot <- njt3 +
geom_nodelab()
njt_boot
# There is so much you can do! For example, let's display the bootstrap values
njt_boot$data$label
# There is so much you can do! For example, let's display the bootstrap values
njt_boot$data$node
# There is so much you can do! For example, let's display the bootstrap values
njt_boot$data$parent
# Putting it all together
# There is so much you can do! For example, let's display the bootstrap values
mlt_boot <- mlt +
geom_tiplab() +
xlim(0, 4)
# Putting it all together
# There is so much you can do! For example, let's display the bootstrap values
mlt_boot <- mlt +
geom_tiplab() +
xlim(0, 4) +
geom_nodelab()
mlt_boot
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
tree_df <- data.frame(mlt_boot$data$label)
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(mlt_boot$data$label)
mlt_append <- mlt_boot %<+% mlt_df
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(mlt_boot$data$label)
mlt_df
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(label = mlt_boot$data$label)
mlt_df
mlt_df$label
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(label = mlt_boot$data$label) %>%
dplyr::mutate(fixnam = word(lable, sep = "peg.", 2))
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(label = mlt_boot$data$label) %>%
dplyr::mutate(fixnam = word(label, sep = "peg.", 2))
mlt_df
dplyr::mutate(fixnam = paste0(word(label, sep = "_", 2),
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(label = mlt_boot$data$label) %>%
dplyr::mutate(fixnam = paste0(word(label, sep = "_", 2),
word(label, sep = "_", 3)))
mlt_df$fixnam
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(label = mlt_boot$data$label) %>%
dplyr::mutate(fixnam = paste0(word(label, sep = "_", 2),
word(label, sep = "_", 3)))
mlt_df$fixnam
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
mlt_df <- data.frame(label = mlt_boot$data$label) %>%
dplyr::mutate(fixnam = paste0(word(label, sep = "_", 2), " ",
word(label, sep = "_", 3)))
mlt_df$fixnam
mlt_append <- mlt_boot %<+% mlt_df
# Now plot with updated labels
mlt_append +
geom_tiplab(aes(label = fixnam))
mlt_append <- mlt %<+% mlt_df #also oh my goodness what is %<+%
# Now plot with updated labels
mlt_append +
xlm(0, 4) +
geom_tiplab(aes(label = fixnam))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam))
# What if we want to change anything/append new variables
# For example if we wanted to fix the names
# First create a df with the first column called label
# Where label corresponding to the phylogenetic tree labels
# That are stored in tree$data$label (see below)
# Then create whatever columns you want
mlt_df <- data.frame(label = mlt_boot$data$label) %>%
dplyr::mutate(fixnam = paste0(word(label, sep = "_", 2), " ",
word(label, sep = "_", 3))) %>%
dplyr::mutate(temp_status = word(label, sep = "_", 3)) # WHOA what is happening here??
# Then merge the data frame with the original tree using %<+%
mlt_append <- mlt %<+% mlt_df #oh my goodness what is %<+%
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status))
# Challenge 1.5 If you wanted to change the colors to be say maroon and navy blue..
# how would you do that? Scale_color_discrete
?scale_color_discrete
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
scale_color_discrete(c("red", "blue"))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
scale_color_manual(pal = c("red", "blue"))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
scale_color_manual( c("red", "blue"))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
scale_color_manual(c("red", "blue"))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
scale_color_manual(values = c("red", "blue"))
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
geom_nodelab()
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
geom_nodelab() +
geom_point(x = 3)
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
geom_nodelab() +
geom_point(x = 5)
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
geom_nodelab() +
geom_point(x = 4)
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
geom_nodelab() +
geom_point(x = 4.5)
# Now plot with updated labels
mlt_append +
xlim(0, 4) +
geom_tiplab(aes(label = fixnam, color = temp_status)) +
geom_nodelab() +
geom_point(x = 4)
