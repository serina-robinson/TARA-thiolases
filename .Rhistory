install.packages("rvg")
pacman::p_load("rvg")
---
title: "TARA Oceans Overview"
output:
flexdashboard::flex_dashboard:
theme: cosmo
vertical_layout: fill
runtime: shiny
---
install.packages("rvg")
pacman::p_load(rvg)
---
title: "TARA Oceans Overview"
output:
flexdashboard::flex_dashboard:
theme: cosmo
vertical_layout: fill
runtime: shiny
---
pacman::p_load("rvg")
pacman::p_load("OfficeR")
pacman::p_load("rvg")
install.packages(plotly)
install.packages("plotly")
library(tidyverse)
library(plotly)
library("reshsape2")
library("reshape2")
install.packages("reshape2")
library("reshape2")
melt
?melt
install.packages("remotes")
remotes::install_github("lmullen/mullenMisc")
length_of_degree <- function(degree, type = c("lat", "long")) {
type <- match.arg(type)
length_at_equator <- 110.5742727 # in kilometers
if (type == "long") {
cos(degree * (2 * pi) / 360) * length_at_equator
} else if (type == "lat") {
length_at_equator
}
}
jitter_latlong <- function(coord, type = c("lat", "long"), latitude, km = 1) {
type = match.arg(type)
if(missing(latitude) & type == "lat") {
latitude <- coord }
km_per_degree <- length_of_degree(latitude, type = type)
degree_per_km <- 1 / km_per_degree
coord + (runif(1, min = -1, max = 1) * degree_per_km * km)
}
jitter_latlong <- Vectorize(jitter_latlong,
vectorize.args = c("coord", "latitude"))
?jitter_latlong
??jitter_latlong
244/26000
library("xtable")
library("data.table")
library("shiny")
library("readxl")
## Read in the datasets
## This is the chemical compound dataset
tab <- read_excel("data/Compounds_complete.xlsx")
## Read in the datasets
## This is the chemical compound dataset
tab <- read_excel("data/Compounds_complete.xlsx", sheet = 1)
colnames(tab)
colnames(tab)[1:8] <- c("Compound", "Formula", "MW", "SMILES", "Synonyms", "CAS", "imgurl", "rxnurl")
install.packages("gggenes")
# install.packages("gggenes")
install.packages("genoPlotR")
tab$imgurl
library("xtable")
library("data.table")
library("shiny")
library("readxl")
# Challenge 3. Now try implementing eventReactive or observeEvent one one of the pages
# of your TARA oceans app. For example, to remove NAs each time a new variable is selected.
vec <- c(7,10,12,13,16)
scale(vec)
# Challenge 3. Now try implementing eventReactive or observeEvent one one of the pages
# of your TARA oceans app. For example, to remove NAs each time a new variable is selected.
vec <- c(7,10,0.4,6)
rescale(c(-10, -9, -5, 2, 6), to = c(0, 100))
scales::rescale(c(-10, -9, -5, 2, 6), to = c(0, 100))
scales::rescale(c(-10, -9, -5, 2, 6), to = c(4, 5))
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/scripts/troy/")
# Read in your full50 dataset
full50 <- read_csv("data/full50_raw.csv")
# Install packages
pacman::p_load("tidyverse")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/scripts/troy/")
# Read in your full50 dataset
full50 <- read_csv("data/full50_raw.csv")
#' @param type Whether the coordinate is latitude or longitude
#' @param latitude If the coordinate is longitude, then the latitude to use for
#'   calculating the maximum amount to jitter.
#' @param km The maximum number of kilometers to jitter a point plus or minus.
#' @return The jittered coordinate in degrees.
#' @examples
#' jitter_latlong(-73, type = "long", lat = 43, km = 1)
#' jitter_latlong(42, type = "lat", km = 1)
#' @export
#' @seealso \code{\link{length_of_degree}}
jitter_latlong <- function(coord, type = c("lat", "long"), latitude, km = 1) { # making a function of coord, type (default c("lat", "long")), latitude, and km (default 1)
type = match.arg(type) # allowing inputs for lat and long to be sorted to the correct one even if they don't input exactly "lat" or "long"?
if(missing(latitude) & type == "lat") {
latitude <- coord } # if there isn't a value given for latitude, but coord is a latitude, then use that
km_per_degree <- length_of_degree(latitude, type = type) # finding the length of a degree from the function explained below
degree_per_km <- 1 / km_per_degree # blah
coord + (runif(1, min = -1, max = 1) * degree_per_km * km)
} #^ taking the coord, adding or subtracting a randomized amount, and then scaling it by the length a degree should be and how many km we want to allow it to move
set.seed(22)
# What is going on here???
jitter_latlong <- Vectorize(jitter_latlong,
vectorize.args = c("coord", "latitude"))
#'
#' Calculates the length of a degree of latitude or longitude in kilometers,
#' assuming an spherical earth.
#'
#' @param degree The degree to calculate the length for
#' @param type Whether to return the length of a degree for latitude or longitude
#' @return Length of the degree in kilometers
#'
#' @export
# Helper function
length_of_degree <- function(degree, type = c("lat", "long")) { # making a function that depends on degree and type
type <- match.arg(type) # making sure your input gets correctly sorted at lat or long again?
length_at_equator <- 110.5742727 # in kilometers /// specifying how long 1 degree at the equator is
if (type == "long") { # if degree is a longitude then we need to convert it
cos(degree * (2 * pi) / 360) * length_at_equator # convert the degrees to radians and take the cos to do something
} else if (type == "lat") { # if degree is a latitude then leave it be
length_at_equator
}
}
# Challenge 1. Walk through the functions and look up any commands you don't know.
# For example, what is match.arg? runif? Vectorize?
?match.arg
# https://alistaire.rbind.io/blog/match.arg/
# checks the input against a set of choices, can partial match
?runif
# seems like it will generate random values in a distribution specified
?Vectorize
full50_1 <- full50 %>%
mutate(lon_jitter = jitter_latlong(full50$lon, type = "long", latitude = full50$lat, km = 50),
lat_jitter = jitter_latlong(full50$lat, type = "lat", km = 50))
select(full50_1, lon_jitter, lat_jitter) %>%
view()
full50_1 <- full50 %>%
mutate(lon_jitter = jitter_latlong(full50$lon, type = "long", latitude = full50$lat, km = 50),
lat_jitter = jitter_latlong(full50$lat, type = "lat", km = 50))
# Read in your full50 dataset
full50 <- read_csv("data/full50_raw.csv")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# Read in your full50 dataset
full50 <- read_csv("data/full50_raw.csv")
full50_1 <- full50 %>%
mutate(lon_jitter = jitter_latlong(full50$lon, type = "long", latitude = full50$lat, km = 50),
lat_jitter = jitter_latlong(full50$lat, type = "lat", km = 50))
select(full50_1, lon_jitter, lat_jitter) %>%
view()
# Install packages
pacman::p_load("tidyverse")
pfaA <- readAAStringSet("data/query_seqs/PfaA.fasta")
head(pfaA)
# Install packages
pacman::p_load("tidyverse",
"Biostrings")
pfaA <- readAAStringSet("data/query_seqs/PfaA.fasta")
head(pfaA)
width(pfaA)
view(pfAA)
view(pfA)
view(pfaA)
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# Read in the BLAST results
blast <- read_csv("data/blast_output/20200615_TARA_psychrophiles_PUFA_blast.csv")
# Install packages
pacman::p_load("tidyverse",
"Biostrings",
"janitor")
# Read in the BLAST results
blast <- read_csv("data/blast_output/20200615_TARA_psychrophiles_PUFA_blast.csv") %>%
janitor::clean_names()
# Read in your mapping dataset
full50 <- read_csv("data/full50_raw.csv")
full50$genome.x
# Search for genome.x in the BLAST results... how would do this?
full50$genome.x %in% blast$genome
genome.x
genome.x
full50$genome.x
# Search for genome.x in the BLAST results... how would do this?
full50$genome.x %in% blast$genome
# Install packages
pacman::p_load("Biostrings", "DECIPHER", "ggtree", "randomcoloR", "stringr", "tidyverse")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/JGI_PUFA/")
### Thermophiles
olea <- read_csv("data/PATRIC_blast_OleA_thermophiles.csv") %>%
janitor::clean_names()
olec <- read_csv("data/PATRIC_blast_OleC_thermophiles.csv") %>%
janitor::clean_names()
head(oled)
oled <- read_csv("data/PATRIC_blast_OleD_thermophiles_2.csv") %>%
janitor::clean_names()
oled$genome_id <- as.numeric(oled$genome_id)
oled$genome_id <- as.numeric(oled$genome_id)
# Read in the thermophile metadata
therm_met <- read_csv("data/PATRIC_metadata_thermophiles.csv") %>%
janitor::clean_names()
head(therm_met)
# Merging the thermophiles
therm_sites <- c("hot", "thermal")
therm_merg <- olea %>%
inner_join(olec, by = "genome_id") %>%
inner_join(oled, by = "genome_id") %>%
left_join(., therm_met, by = "genome_id")  %>%
dplyr::filter(!is.na(temperature_range) | !is.na(optimal_temperature) | !is.na(isolation_source)) %>%
dplyr::filter(grepl(paste0(therm_sites, collapse = "|"), isolation_source) | temperature_range == "Thermophilic") %>%
dplyr::mutate(genus = word(genome.x, 1, sep = " ")) %>%
dplyr::rename(OleA_locus = ref_seq_locus_tag.x) %>%
dplyr::rename(OleC_locus = ref_seq_locus_tag.y) %>%
dplyr::rename(OleD_locus = ref_seq_locus_tag) %>%
dplyr::rename(OleA_patric = patric_id.x) %>%
dplyr::rename(OleC_patric = patric_id.y) %>%
dplyr::rename(OleD_patric = patric_id) %>%
dplyr::select(genome.x, genus, OleA_locus, OleC_locus, OleD_locus, OleA_patric,
OleC_patric, OleD_patric, isolation_source, temperature_range, optimal_temperature) %>%
group_by(OleA_patric) %>%
arrange(temperature_range) %>%
dplyr::slice(1)
head(therm)
head(therm_merg)
which_therm <- therm_merg %>%
dplyr::filter(temperature_range == "Thermophilic")
which_therm
# Read in your mapping dataset
full50 <- read_csv("data/full50_raw.csv")
# Set working directory
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# Read in your mapping dataset
full50 <- read_csv("data/full50_raw.csv")
full50$genome.x # this is the column we are interested in!
# Challenge 5. Make a plot of whether each genome has a hit for PfaA, OleA, B, C, and D
# You can use ggplot with geom_tile() See example code below. Note this is an abbreviated
# version using only the OleACD hits from the full50 dataset
full50$OleA
# Challenge 5. Make a plot of whether each genome has a hit for PfaA, OleA, B, C, and D
# You can use ggplot with geom_tile() See example code below. Note this is an abbreviated
# version using only the OleACD hits from the full50 dataset
full50$OleA_locus
# Challenge 5. Make a plot of whether each genome has a hit for PfaA, OleA, B, C, and D
# You can use ggplot with geom_tile() See example code below. Note this is an abbreviated
# version using only the OleACD hits from the full50 dataset
full50$OleA_patric
dat_for_plot <- full50 %>%
dplyr::filter(!is.na(OleA_patric))
dim(dat_for_plot)
dat_for_plot <- full50 %>%
dplyr::filter(!is.na(OleA_patric)) %>%
mutate(OleA_pos = stringr::word(OleA_patric, sep = "\\.", -1))
dat_for_plot$OleA_pos
dat_for_plot <- full50 %>%
dplyr::filter(!is.na(OleA_patric)) %>%
mutate(OleA_pos = stringr::word(OleA_patric, sep = "\\.", -1),
OleC_pos = stringr::word(OleC_patric, sep = "\\.", -1),
OleD_pos = stringr::word(OleD_patric, sep = "\\.", -1))
dat_for_plot$OleA_pos
dat_for_plot$OleC_pos
dat_for_plot$OleD_pos
# See example below
dat <- matrix(rnorm(100, 3, 1), ncol=10)
## reshape data (tidy/tall form)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1')
# See example below
dat <- matrix(rnorm(100, 3, 1), ncol=10)
dat2 <- dat %>%
tbl_df() %>%
rownames_to_column('Var1')
dat2 <- dat %>%
tbl_df()
# See example below
dat <- matrix(rnorm(100, 3, 1), ncol=10)
dat2 <- dat %>%
tbl_df()
# See example below
dat <- data.frame(matrix(rnorm(100, 3, 1), ncol=10))
dat
## reshape data (tidy/tall form)
dat2 <- dat %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1) %>%
mutate(
Var1 = factor(Var1, levels=1:10),
Var2 = factor(gsub("V", "", Var2), levels=1:10)
)
dat2 <- dat %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1)
dat2 <- dat %>%
rownames_to_column('Var1')
View(dat2)
dat2 <- dat %>%
rownames_to_column('Var1') %>%
gather(Var2, value, -Var1)
View(dat2)
dat_wide <- full50 %>%
dplyr::filter(!is.na(OleA_patric)) %>%
dplyr::mutate(OleA_pos = stringr::word(OleA_patric, sep = "\\.", -1),
OleC_pos = stringr::word(OleC_patric, sep = "\\.", -1),
OleD_pos = stringr::word(OleD_patric, sep = "\\.", -1)) %>%
dplyr::select(OleA_pos, OleC_pos, OleD_pos)
dat_wide <- full50 %>%
dplyr::filter(!is.na(OleA_patric)) %>%
dplyr::mutate(OleA_pos = stringr::word(OleA_patric, sep = "\\.", -1),
OleC_pos = stringr::word(OleC_patric, sep = "\\.", -1),
OleD_pos = stringr::word(OleD_patric, sep = "\\.", -1)) %>%
dplyr::select(genome.x, OleA_pos, OleC_pos, OleD_pos)
dat_wide
dat_long <- dat_wide %>%
gather(genome.x, gene.id)
dat_long
dat_long <- dat_wide %>%
gather(gene.id)
dat_long
dat_long <- dat_wide %>%
gather(key = genome.x, value = gene.id)
dat_long
dat_long <- dat_wide %>%
gather(key = gene.id, value = gene.pos, -genome.x)
dat_long
# Pull out the genome positions for OleA, C, and D using stringr::word
# YOu can use ?stringr::word to look it up
?word
## plot data
ggplot(dat2, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) +
scale_fill_gradient(low = "white", high = "red")
# Convert to long format for ggplot
dat_long <- dat_wide %>%
gather(key = gene.id, value = gene.pos, -genome.x)
## plot data
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) +
scale_fill_gradient(low = "white", high = "red")
dat_long,
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) +
scale_fill_gradient(low = "white", high = "red")
dat_long$gene.id
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) #+
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
geom_tile() +
geom_text(aes(label = round(gene.pos, 1))) #+
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
# geom_tile() +
geom_text(aes(label = round(gene.pos, 1))) #+
dat_long$gene.pos
# Convert to long format for ggplot
dat_long <- dat_wide %>%
gather(key = gene.id, value = gene.pos, -genome.x) %>%
mutate(gene.pos = as.numeric(gene.pos))
dat_long$gene.id
dat_long$gene.pos
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
# geom_tile() +
geom_text(aes(label = round(gene.pos, 1))) #+
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
geom_tile() +
geom_text(aes(label = round(gene.pos, 1))) #+
## plot data
ggplot(dat_long, aes(genome.x, gene.id)) +
geom_tile() +
geom_text(aes(label = round(gene.pos, 1))) #+
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile() +
geom_text(aes(label = round(gene.pos, 1))) #+
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 5)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) #+
scale_fill_gradient(low = "white", high = "red")
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 5)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "white", high = "red")
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 20)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "white", high = "red")
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 20)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "blue", high = "red")
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "blue", high = "red")
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "blue", high = "red") +
theme_classic()
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "cornflowerblue", high = "red") +
theme_classic()
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_gradient(low = "dodgerblue", high = "red") +
theme_classic()
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_viridis("magma") +
# scale_fill_gradientn(low = "dodgerblue", mid = "yellow", high = "red") +
theme_classic()
dev.off()
# Install packages
pacman::p_load("tidyverse",
"Biostrings",
"janitor",
"viridis")
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_viridis("magma") +
# scale_fill_gradientn(low = "dodgerblue", mid = "yellow", high = "red") +
theme_classic()
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_viridis(option = "magma") +
# scale_fill_gradientn(low = "dodgerblue", mid = "yellow", high = "red") +
theme_classic()
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) + #+
scale_fill_viridis(option = "inferno") +
# scale_fill_gradientn(low = "dodgerblue", mid = "yellow", high = "red") +
theme_classic()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) +
scale_fill_gradient2(low = "dodgerblue", mid = "yellow", high = "red") +
theme_classic()
dev.off()
## plot data
pdf("output/OleACD_heatmap.pdf", height = 20, width = 10)
ggplot(dat_long, aes(gene.id, genome.x)) +
geom_tile(aes(fill = gene.pos)) +
geom_text(aes(label = round(gene.pos, 1))) +
scale_fill_gradient(low = "dodgerblue", high = "red") +
theme_classic()
dev.off()
