fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon_jitter,
lat = ~lat_jitter,
#  popup = content,
radius = ~depth_m,
fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon_jitter,
lat = ~lat_jitter,
#  popup = content,
#  radius = ~depth_m,
fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Order:", mapp$order, "<br>",
"Class:", mapp$class, "<br>",
"Phylum:", mapp$phylum, "<br>",
"Temperature:", mapp$temperature, "<br>",
"Depth:", mapp$depth_m)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon_jitter,
lat = ~lat_jitter,
popup = content,
#  radius = ~depth_m,
fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Order:", mapp$order, "<br>",
"Class:", mapp$class, "<br>",
"Phylum:", mapp$phylum, "<br>",
"Temperature:", mapp$temperature, "<br>",
"Depth:", mapp$depth_m, "meters")
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Order:", mapp$order, "<br>",
"Class:", mapp$class, "<br>",
"Phylum:", mapp$phylum, "<br>",
"Temperature:", round(mapp$temperature, 1), "Celsius <br>",
"Depth:", mapp$depth_m, "meters")
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon_jitter,
lat = ~lat_jitter,
popup = content,
#  radius = ~depth_m,
fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 2,
fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Order:", mapp$order, "<br>",
"Class:", mapp$class, "<br>",
"Phylum:", mapp$phylum, "<br>",
"Temperature:", round(mapp$temperature, 1), "<br>",
"Depth:", mapp$depth_m, "meters")
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Order:", mapp$order, "<br>",
"Class:", mapp$class, "<br>",
"Phylum:", mapp$phylum, "<br>",
"Temperature:", mapp$temperature, "<br>",
"Depth:", mapp$depth_m, "meters")
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 2,
fillOpacity = 0.5,
stroke = FALSE,
color = ~temperature)
# Set the custom color palette
pal <- colorNumeric(
palette = "magma",
na.color = "#d3d3d3",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 2,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Set the custom color palette
pal <- colorNumeric(
palette = "viridis",
na.color = "#d3d3d3",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Set the custom color palette
pal <- colorNumeric(
palette = "RdBlu",
na.color = "#d3d3d3",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Set the custom color palette
pal <- colorNumeric(
palette = "blue2red",
na.color = "#d3d3d3",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu",
na.color = "#d3d3d3",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
# addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Make an interactive map!
leaflet(data = mapp) %>%
#addProviderTiles(providers$Esri.WorldPhysical) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
#  addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu",
na.color = "gray60",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
#  addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu",
na.color = "gray70",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
#  addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Order:", mapp$order, "<br>",
"Class:", mapp$class, "<br>",
"Phylum:", mapp$phylum, "<br>",
"Temperature:", round(mapp$temperature, 1), "<br>",
"Depth:", mapp$depth_m, "meters")
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu",
na.color = "gray70",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$Esri.WorldPhysical) %>%
#  addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # you can try a different provider tile
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Make an interactive map!
leaflet(data = mapp) %>%
#  addProviderTiles(providers$Esri.WorldPhysical) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>% # example of changing the map style
# you can find the names of different map tiles here:
# http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
#  addProviderTiles(providers$Esri.WorldPhysical) %>% # example of changing the map style
# you can find the names of different map tiles here:
# http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Add the 'content' for pop-up text
content <- paste("Genus:", mapp$genus, "<br>",
"Family:", mapp$family, "<br>",
"Temperature:", round(mapp$temperature, 1), "<br>",
"Depth:", mapp$depth_m, "meters")
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu",
na.color = "gray70",
reverse = TRUE,
domain = mapp$temperature)
# Make an interactive map!
leaflet(data = mapp) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
#  addProviderTiles(providers$Esri.WorldPhysical) %>% # example of changing the map style
# you can find the names of different map tiles here:
# http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# Read in environmental dataset for metagenome-assembled genomes with oleACD clusters in TARA
mapp <- read_csv("data/TARA_tree_annotation_df.csv")
colnames(mapp) # this should look familiar!
# Load packages
pacman::p_load("tidyverse", "leaflet", "viridis")
# Set working directory
setwd("C:/Users/tabie/OneDrive/Documents/GitHub/TARA-thiolases/")
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# Read in environmental dataset for metagenome-assembled genomes with oleACD clusters in TARA
dat <- read_csv("data/TARA_tree_annotation_df.csv")
# Add the 'content' for pop-up text
content <- paste("Genus:", dat$genus, "<br>",
"Family:", dat$family, "<br>",
"Temperature:", round(dat$temperature, 1), "<br>",
"Depth:", dat$depth_m, "meters")
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu", # name of a color palette
# full list of color palettes available here
# https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
na.color = "gray70",
reverse = TRUE,
domain = dat$temperature)
# Make an interactive map!
leaflet(data = dat) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
#  addProviderTiles(providers$Esri.WorldPhysical) %>% # example of changing the map style
# you can find the names of different map tiles here:
# http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Make an interactive map!
leaflet(data = dat) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
#  addProviderTiles(providers$Esri.WorldPhysical) %>% # example of changing the map style
# you can find the names of different map tiles here:
# http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(lng = ~lon_jitter,
lat = ~lat_jitter,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Challenge 6. Super bonus challenge. You will notice some of the points overlap so you can't see them all.
# What happens if you use lat_jitter and lon_jitter (existing columns) for plotting instead
# I've created these columns using the following function:
# https://rdrr.io/github/lmullen/mullenMisc/man/jitter_latlong.html
# Can you recreate this 'jittering' effect yourself?
# You'll need to use the jitter_latlong function from the following package:
# Use the command devtools::install_github("lmullen/mullenMisc") to install
devtools::install_github("lmullen/mullenMisc")
# Load packages
pacman::p_load("tidyverse", "leaflet", "viridis", "devtools")
# Challenge 6. Super bonus challenge. You will notice some of the points overlap so you can't see them all.
# What happens if you use lat_jitter and lon_jitter (existing columns) for plotting instead
# I've created these columns using the following function:
# https://rdrr.io/github/lmullen/mullenMisc/man/jitter_latlong.html
# Can you recreate this 'jittering' effect yourself?
# You'll need to use the jitter_latlong function from the following package:
# Use the command devtools::install_github("lmullen/mullenMisc") to install
devtools::install_github("lmullen/mullenMisc")
jitter_latlong
jitter_latlong()
pacman::p_load("mullenMisc")
# Load packages
pacman::p_load("tidyverse", "leaflet")
# Set working directory
setwd("C:/Users/tabie/OneDrive/Documents/GitHub/TARA-thiolases/")
# Read in environmental dataset for metagenome-assembled genomes with oleACD clusters in TARA
dat <- read_csv("data/TARA_tree_annotation_df.csv")
# Add the 'content' for pop-up text
content <- paste("Genus:", dat$genus, "<br>",
"Family:", dat$family, "<br>",
"Temperature:", round(dat$temperature, 1), "<br>",
"Depth:", dat$depth_m, "meters")
# Set the custom color palette
pal <- colorNumeric(
palette = "RdYlBu", # name of a color palette
# full list of color palettes available here
# https://www.nceas.ucsb.edu/sites/default/files/2020-04/colorPaletteCheatsheet.pdf
na.color = "gray70",
reverse = TRUE,
domain = dat$temperature)
# Make an interactive map!
leaflet(data = dat) %>%
addProviderTiles(providers$CartoDB.PositronNoLabels) %>%
#  addProviderTiles(providers$Esri.WorldPhysical) %>% # example of changing the map style
# you can find the names of different map tiles here:
# http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(lng = ~lon,
lat = ~lat,
popup = content,
radius = 4,
fillOpacity = 0.5,
stroke = FALSE,
color = ~pal(temperature))
# Challenge 1. Change the map style to a physical world map rather than just country outlines
# Challenge 2. Change the point coloring to be a different variable than temperature
# e.g. depth, oxygen, iron etc.
# Challenge 3. Change the radius of the points to visualize a different variable
# Note, you may run into issues just using the variable directly. Log transformations will be your friend.
# Challenge 4. Change the popup to display not only the genus and family but also the order, class and phylum
# Challenge 5. The current map is displaying all 244 samples. Try only showing 30 points for the sequences we are actually getting!
# Challenge 6. You will notice some of the points overlap so you can't see them all.
# What happens if you use lat_jitter and lon_jitter (existing columns) for plotting instead?
# I've created these columns using the following function:
# https://rdrr.io/github/lmullen/mullenMisc/man/jitter_latlong.html
# Challenge 7. Open to showing your map in lab meeting?
# Super challenge 8: Can you also plot the locations of your thermophiles and psychrophiles?
# (This is part of the long-term goal for the week so no need to accomplish today)
# Create the superheroes dataset
superheroes <-"
name, alignment, gender,         publisher
Magneto,       bad,   male,            Marvel
Storm,      good, female,            Marvel
Mystique,       bad, female,            Marvel
Batman,      good,   male,                DC
Joker,       bad,   male,                DC
Catwoman,       bad, female,                DC
Hellboy,      good,   male, Dark Horse Comics
"
superheroes <- read_csv(superheroes, trim_ws = TRUE, skip = 1)
# Create the publishers dataset
publishers <- "
publisher, yr_founded
DC,       1934
Marvel,       1939
Image,       1992
"
publishers <- read_csv(publishers, trim_ws = TRUE, skip = 1)
# Create the superheroes dataset
superheroes <-"
name, alignment, gender,         publisher
Magneto,       bad,   male,            Marvel
Storm,      good, female,            Marvel
Mystique,       bad, female,            Marvel
Batman,      good,   male,                DC
Joker,       bad,   male,                DC
Catwoman,       bad, female,                DC
Hellboy,      good,   male, Dark Horse Comics
"
superheroes <- read_csv(superheroes, trim_ws = TRUE, skip = 1)
# Create the publishers dataset
publishers <- "
publisher, yr_founded
DC,       1934
Marvel,       1939
Image,       1992
"
publishers <- read_csv(publishers, trim_ws = TRUE, skip = 1)
# Try different types of joins
ijsp <- inner_join(superheroes, publishers, by="publisher")
select(surveys, plot_id, species_id, weight)
# So using the pipe was another way to do this
rjsp2 <- right_join(superheroes, publishers)
########
# Function: right_join
# Keep all rows in right-hand ‘y’ dataset (i.e., publishers).
# Add columns from superheroes where there is a match.
rjsp <- superheroes %>%  # WHOA what is THIS '%>%' ??? see below
right_join(publishers)
rjsp == rjsp2
# So using the pipe was another way to do this
rjsp2 <- right_join(superheroes, publishers)
rjsp == rjsp2
rjsp2
# You'll be using the following datset
surveys <- read_csv("data/tutorials/surveys.csv")
view(surveys)
