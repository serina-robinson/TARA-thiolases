distan
names(distan)
dim(df)
df2 <- data.frame(bind_cols(rownames(df), df))
df2 <- data.frame(cbind(rownames(df), df))
head(df2)
rownames(df2) <- NULL
colnames(df2) <- c("mutation", "distance")# unique_id # distance # unique_id_that_it_is_close_to
head(df2)
names(distan)
distan
unlist(distan)
orig_mut <- names(unlist(distan))
orig_mut
df2 <- data.frame(cbind(orig_mut, df))
rownames(df2) <- NULL
colnames(df2) <- c("mutation", "distance")# unique_id # distance # unique_id_that_it_is_close_to
head(df2)
fin_df <- df2 %>%
dplyr::mutate(start_mut = word(mutation, sep = "\\.", 1))
head(fin_df)
fin_df <- df2 %>%
dplyr::mutate(start_mut = word(mutation, sep = "\\.", 1)) %>%
dplyr::mutate(start_mut = word(mutation, sep = "\\.", 2)) %>%
dplyr::select(-mutation)
head(fin_df)
fin_df <- df2 %>%
dplyr::mutate(start_mut = word(mutation, sep = "\\.", 1)) %>%
dplyr::mutate(stop_mut = word(mutation, sep = "\\.", 2)) %>%
dplyr::select(-mutation)
head(fin_df)
mat <- mat[lower.tri(mat)] <- 0
mat
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
mat[lower.tri(mat)] <- 0
mat
mat <- matrix(nrow = nummuts, ncol = nummuts)
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
mat[lower.tri(mat)] <- 0
mat
distan <- apply(mat, 2, find_close)
find_close <- function(x) {
x[x > 0 & x < 10]
}
orig_mut <- names(unlist(distan))
orig_mut
df <- do.call("rbind", distan)
df2 <- data.frame(cbind(orig_mut, df))
rownames(df2) <- NULL
colnames(df2) <- c("mutation", "distance")# unique_id # distance # unique_id_that_it_is_close_to
fin_df <- df2 %>%
dplyr::mutate(start_mut = word(mutation, sep = "\\.", 1)) %>%
dplyr::mutate(stop_mut = word(mutation, sep = "\\.", 2)) %>%
dplyr::select(-mutation)
head(fin_df)
library("tidyverse")
# Read in the data
dat <- read_csv("~/Downloads/serina_test.csv")
nummuts <- length(dat$unique_id) # num uniq mutations
# Set up empty matrix
mat <- matrix(nrow = nummuts, ncol = nummuts)
# Populate matrix
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
# Set lower triangle of matrix to 0
mat[lower.tri(mat)] <- 0
distan <- apply(mat, 2, find_close)
# Function to find close mutations
find_close <- function(x) {
x[x > 0 & x < 10]
}
distan <- apply(mat, 2, find_close)
head(distan)
distan[[1]]
distan[[1]] <- c(3, 4, 3)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
head(df)
distan
distan[[1]]
# Function to find close mutations
find_close <- function(x) {
x[x > 0 & x < 100]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
head(df)
df2 <- data.frame(cbind(orig_mut, df))
rownames(df2) <- NULL
colnames(df2) <- c("mutation", "distance")
head(df2)
library("tidyverse")
# Read in the data
dat <- read_csv("~/Downloads/serina_test.csv")
nummuts <- length(dat$unique_id) # num uniq mutations
# Set up empty matrix
mat <- matrix(nrow = nummuts, ncol = nummuts)
# Populate matrix
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
# Set lower triangle of matrix to 0
mat[lower.tri(mat)] <- 0
# Function to find close mutations
find_close <- function(x) {
x[x > 0 & x < 100][1]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
# Function to find close mutations
find_close <- function(x) {
val <- x[x > 0 & x < 100]
return(val[1])
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
# Read in the data
dat <- read_csv("~/Downloads/serina_test.csv")
nummuts <- length(dat$unique_id) # num uniq mutations
# Set up empty matrix
mat <- matrix(nrow = nummuts, ncol = nummuts)
# Populate matrix
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
# Set lower triangle of matrix to 0
mat[lower.tri(mat)] <- 0
# Function to find close mutations
find_close <- function(x) {
val <- x[x > 0 & x < 100]
return(val[1])
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
head(distan)
# Function to find close mutations
find_close <- function(x) {
val <- x[x > 0 & x < 100]
return(val[1])
}
distan <- apply(mat, 2, find_close)
# Read in the data
dat <- read_csv("~/Downloads/serina_test.csv")
# Read in the data
dat <- read_csv("~/Downloads/serina_test.csv")
nummuts <- length(dat$unique_id) # num uniq mutations
# Set up empty matrix
mat <- matrix(nrow = nummuts, ncol = nummuts)
# Populate matrix
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
# Set lower triangle of matrix to 0
mat[lower.tri(mat)] <- 0
# Function to find close mutations
find_close <- function(x) {
val <- x[x > 0 & x < 100]
return(val[1])
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
head(df)
# Function to find close mutations
find_close <- function(x) {
}
# Function to find close mutations
find_close <- function(x) {
x[grep("[^0-9]", x)]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
# Populate matrix
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
# Set lower triangle of matrix to 0
mat[lower.tri(mat)] <- 0
# Function to find close mutations
find_close <- function(x) {
x[grep("[^0-9]", x)]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
head(distan)
# Read in the data
dat <- read_csv("~/Downloads/serina_test.csv")
nummuts <- length(dat$unique_id) # num uniq mutations
# Set up empty matrix
mat <- matrix(nrow = nummuts, ncol = nummuts)
# Populate matrix
for(i in 1:nummuts) {
for(j in 1:nummuts) {
mat[i,j] <- abs(dat$position[i] - dat$position[j])
}
}
colnames(mat) <- dat$unique_id
rownames(mat) <- dat$unique_id
# Set lower triangle of matrix to 0
mat[lower.tri(mat)] <- 0
# Function to find close mutations
find_close <- function(x) {
x[grep("[^0-9]", x)]
}
# Function to find close mutations
find_close <- function(x) {
x[grep("[^0-9]", x)]
}
distan <- apply(mat, 2, find_close)
head(distan)
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 10]
}
distan <- apply(mat, 2, find_close)
head(distan)
orig_mut <- names(unlist(distan))
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 100]
}
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 100]
}
distan <- apply(mat, 2, find_close)
head(distan)
orig_mut <- names(unlist(distan))
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
head(df)
#df <- do.call("rbind", distan)
df <- data.table::rbindlinst(distan)
head(df)
#df <- do.call("rbind", distan)
df <- data.table::rbindlist(distan)
head(df)
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
class(distan)
df <- data.table::rbindlist(distan, fill = T)
class(distan)
distan[[1]]
df2 <- dplyr::bind_rows(distan)
#df <- data.table::rbindlist(distan, fill = T)
df2 <- purrr::map_df(distan, ~as.data.frame(t(.distan),stringsAsFactors = FALSE))
class(distan)
#df <- data.table::rbindlist(distan, fill = T)
df2 <- purrr::map_df(x, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
#df <- data.table::rbindlist(distan, fill = T)
df2 <- purrr::map_df(distan, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
head(df2)
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 10]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
df <- do.call("rbind", distan)
df2 <- dplyr::bind_rows(distan, fill = T)
#df <- data.table::rbindlist(distan, fill = T)
df_purr <- purrr::map_df(distan, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 10]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
#df <- data.table::rbindlist(distan, fill = T)
df_purr <- purrr::map_df(distan, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
head(df_purr)
View(df_purr)
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 100]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
#df <- data.table::rbindlist(distan, fill = T)
df_purr <- purrr::map_df(distan, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
head(df_purr)
df2 <- data.frame(cbind(orig_mut, df))
View(df_purr)
#df <- data.table::rbindlist(distan, fill = T)
# df_purr <- purrr::map_df(distan, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
df_res <- plyr::rbind.fill(lapply(distan, function(y){as.data.frame(t(y),
stringsAsFactors=FALSE)}))
head(df_res)
View(df_res)
# Function to find close mutations
find_close <- function(x) {
#x[grep("[^0-9]", x)]
x[x > 0 & x < 100]
}
distan <- apply(mat, 2, find_close)
orig_mut <- names(unlist(distan))
#df <- data.table::rbindlist(distan, fill = T)
# df_purr <- purrr::map_df(distan, ~as.data.frame(t(.x),stringsAsFactors = FALSE))
df_res <- plyr::rbind.fill(lapply(distan, function(y){as.data.frame(t(y),
stringsAsFactors=FALSE)}))
pdb_pull2
pdb_pull2
166/50064
0.0033 * 100
2000 - 1883
2020 - 1883
169 + 12
# Read in the TARA sequences only
tara <- readAAStringSet('data/TARA_marine_sequences_to_order.fasta') # these are the 30 sequences from TARA oceans
# Load packages
pacman::p_load("tidyverse")
# Load packages
pacman::p_load("Biostrings", "tidyverse")
# Read in the TARA sequences only
tara <- readAAStringSet('data/TARA_marine_sequences_to_order.fasta') # these are the 30 sequences from TARA oceans
names(tara)
# Read in the sequence metadata
annot_df <- read_csv("data/TARA_tree_annotation_df.csv")
setwd('~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/')
# Now that we've got our data frame...let's calculate some statistics
# We'll start with some variables of interest
colnames(annot_df)
# Now that we've got our data frame...let's calculate some statistics
# We'll start with some variables of interest
colnames(annot_df)
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/")
setwd("~/Documents/University_of_Minnesota/Wackett_Lab/github/TARA-thiolases/")
# Read in the TARA sequences only
tara <- readAAStringSet('data/TARA_marine_sequences_to_order.fasta') # these are the 30 sequences from TARA oceans
names(tara)
# Read in the sequence metadata
annot_df <- read_csv("data/TARA_tree_annotation_df.csv")
view(annot_df) # View the data frame in a different window
colnames(annot_df) # What sorts of variables are in this data frame
dim(annot_df) # Check the dimensions, 244 rows and 55 columns
# But wait! we only have 30 sequences we actually ordered
# Subset the data frame...
twenty_nine <- annot_df[annot_df$label %in% names(tara),]
dim(twenty_nine) # 29 rows and 55 columns
# Now that we've got our data frame...let's calculate some statistics
# We'll start with some variables of interest
colnames(annot_df)
# Now that we've got our data frame...let's calculate some statistics
# We'll start with some variables of interest
vars <- colnames(annot_df)[26:50]
vars
class(vars)
sub_df <- annot_df[,colnames(annot_df) %in% vars]
head(sub_df)
vars <- colnames(dat)[26:50]
# Now that we've got our data frame...let's calculate some statistics
# We'll start with some variables of interest
dat <- annot_df # you can change this to thirty, or twenty_nine if you just want to look at some seqs
vars <- colnames(dat)[26:50]
sub_df <- dat[,colnames(dat) %in% vars]
sub_df
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
summary(sub_df$temperature)[3]
summary(sub_df$temperature)[2]
summary(sub_df$temperature)[4]
# This is the same as pulling out the 4th item from the summary
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df)
# Load packages
pacman::p_load("Biostrings", "tidyverse", "GGally")
# Calculate correlations between variables
ggpairs(sub_df)
# Subset the data frame only for variables you're interested in
vars <- c("temperature", "oxygen") # subsetting the 26th through the 50th columns
sub_df <- dat[,colnames(dat) %in% vars]
# Calculate the min, median, mean, max temperatures
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df)
# Calculate correlations between variables
ggpairs(sub_df) +
theme_classic()
# Calculate correlations between variables
ggpairs(sub_df) +
theme_bw()
# Calculate correlations between variables
ggpairs(sub_df)
colnames(vars)
colnames(vars)
colnames(sub_df)
colnames(sub_df)
colnames(sub_df)
colnames(dat)
# Subset the data frame only for variables you're interested in
vars <- c("temperature", "oxygen", "no2", "depth_m", "iron_5m", "po4") # subsetting for variables of interest
sub_df <- dat[,colnames(dat) %in% vars]
colnames(dat)
# Calculate the min, median, mean, max temperatures
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df) +
theme_bw()
# Subset the data frame only for variables you're interested in
vars <- c("temperature", "oxygen", "depth_m", "iron_5m") # subsetting for variables of interest
sub_df <- dat[,colnames(dat) %in% vars]
# Calculate the min, median, mean, max temperatures
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df) +
theme_bw()
# Subset the data frame only for variables you're interested in
vars <- c("temperature", "oxygen", "no3", "po4", "iron_5m") # subsetting for variables of interest
sub_df <- dat[,colnames(dat) %in% vars]
# Calculate the min, median, mean, max temperatures
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df) +
theme_bw()
# Subset the data frame only for variables you're interested in
vars <- c("temperature", "oxygen", "no3", "po4", "iron_5m", "ocean_region") # subsetting for variables of interest
sub_df <- dat[,colnames(dat) %in% vars]
# Calculate the min, median, mean, max temperatures
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df) +
theme_bw()
# Subset the data frame only for variables you're interested in
vars <- c("temperature", "oxygen", "no3", "po4", "iron_5m") # subsetting for variables of interest
sub_df <- dat[,colnames(dat) %in% vars]
# Calculate the min, median, mean, max temperatures
summary(sub_df$temperature)
# If you want to just look at one of these
mean(sub_df$temperature, na.rm = T)
# This is the same as pulling out the 4th item from the summary
summary(sub_df$temperature)[4]
mean(sub_df$temperature, na.rm = T) == summary(sub_df$temperature)[4]
# Calculate correlations between variables
ggpairs(sub_df) +
theme_bw()
colnames(dat)
